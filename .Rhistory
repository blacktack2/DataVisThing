if ("rjson" %in% inst_packages[, 1]) {
remove.packages("rjson")
install.packages("rjson")
}
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
remove.packages(package)
install.packages(package)
}
}
reinstall("rjson")
library("rjson")
install.packages(package)
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
remove.packages(package)
}
install.packages(package)
}
reinstall("rjson")
update.packages(package)
}
reinstall("rjson")
install.packages("RJSONIO")
library("rjson")
reinstall("rjson")
}
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {}
install.packages(package)
}
}
reinstall("rjson")
library("rjson")
data <- fromJSON(file="data/1656633600")
data <- fromJSON(file="cleaned/1656633600")
data <- fromJSON(file="cleaned/1656633600")
print(data)
print(as.data.frame(data))
data
mydata <- fromJSON(file="cleaned/1656633600")
print(as.data.frame(mydata))
mydata <- fromJSON(file="cleaned/1656633600")
print(as.data.frame(mydata))
mydata
mydata <- fromJSON(file="cleaned/1656633600")
mydata <- fromJSON(file="cleaned/1656633600")
mydata <- fromJSON(file="cleaned/1656633600")
print(as.data.frame(mydata))
raw_data <- fromJSON(file="cleaned/1656633600")
df <- as.data.frame(raw_data)
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("rjson")
library("rjson")
raw_data <- fromJSON(file="cleaned/1656633600")
df <- as.data.frame(raw_data)
df.head
head(df)
head(df, n=10L)
head(df, n=1L)
nrow(df)
reinstall("jsonlite")
library("jsonlite")
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
raw_data <- fromJSON(file="cleaned/1656633600", simplifyDataFrame = TRUE)
raw_data <- fromJSON("cleaned/1656633600", simplifyDataFrame = TRUE)
raw_data
nrows(raw_data, n=1)
nrow(raw_data, n=1)
nrow(raw_data)
head(raw_data, n=2)
tail(raw_data, n=2)
df <- fromJSON("cleaned/1656633600", simplifyDataFrame = TRUE)
reinstall("lubridate")
df$timestamp <- dmy(df$timestamp)
reinstall("anytime")
df$timestamp <- anytime(df$timestamp)
df
library("anytime")
anytime(1234567)
df$timestamp <- anytime(df$timestamp)
df$timestamp <- anytime(df$timestamp)
df
df %>% group_by(type)
x <- df %>% group_by(type)
library("tidyverse")
reinstall("tidyverse")
library("tidyverse")
reinstall("dplyr")
x <- df %>% group_by(type)
library("dplyr")
x <- df %>% group_by(type)
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
library(package)
}
x
df <- fromJSON("cleaned/*", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned/", pattern="*", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned/", pattern="/*", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned/", pattern="/1*", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned/", pattern="/1*", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned/", pattern="/*.json", simplifyDataFrame = TRUE)
df <- fromJSON("cleaned", pattern="/*.json", simplifyDataFrame = TRUE)
reinstall("purrr")
install.packages(package)
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
library(package)
}
reinstall("jsonlite")
reinstall("anytime")
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
reinstall("anytime")
library("anytime")
reinstall("dplyr")
library("dplyr")
reinstall("purrr")
library("purrr")
df <- fromJSON("cleaned", pattern="/*.json", simplifyDataFrame = TRUE)
df <- file %>% fromJSON(file.path(path, .), simplifyDataFrame = TRUE)
df <- file %>% ~fromJSON(file.path(path, .), simplifyDataFrame = TRUE)
df_raw <- file %>% ~fromJSON(file.path(path, .), simplifyDataFrame = TRUE)
df <- df_raw %>% group_by(type)
df_raw <- file %>% map_df(~fromJSON(file.path(path, .), simplifyDataFrame = TRUE))
df_raw <- file %>% ~fromJSON(file.path(path, .), simplifyDataFrame = TRUE)
df_raw
df_raw <- file %>% map_df(~fromJSON(file.path(path, .), simplifyDataFrame = TRUE, flatten = TRUE))
df_raw <- file %>% map_df(~fromJSON(file.path(path, .), simplifyDataFrame = TRUE))
reinstall("tidyverse")
library("tidyverse")
reinstall("tidyverse")
reinstall("tidyverse")
reinstall("tidyverse")
library("tidyverse")
path <- "./cleaned"
files <- dir(path, pattern = "*.json")
df_raw <- file %>% map_df(~fromJSON(file.path(path, .), simplifyDataFrame = TRUE))
library("purrr")
library("tidyverse")
library("jsonlite")
path <- "./cleaned"
files <- dir(path, pattern = "*.json")
df_raw <- file %>% map_df(~fromJSON(file.path(path, .), simplifyDataFrame = TRUE))
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
reinstall("anytime")
library("anytime")
reinstall("dplyr")
library("dplyr")
df_raw <- fromJSON("cleaned/1656633600", simplifyDataFrame = TRUE)
df_raw <- fromJSON("cleaned/1656633600.json", simplifyDataFrame = TRUE)
df_raw <- union(df_raw, fromJSON("cleaned/1656720000.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656806400.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656892800.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656979200.json", simplifyDataFrame = TRUE))
df <- df_raw %>% group_by(type)
df$timestamp <- anytime(df$timestamp)
head(df, n=10)
nrow(df)
df
reinstall("ggplot2")
library("ggplot2")
ggplot(data=df, aes(x=timestamp, y=light, group=light)) + geom_line() + geom_point()
ggplot(data=df, aes(x=timestamp, y=light, group=0)) + geom_line() + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=0)) + geom_line() + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=0)) + geom_line()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=0)) + geom_line(color = "red") + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=1)) + geom_line(color = "red") + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=2)) + geom_line(color = "red") + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=3)) + geom_line(color = "red") + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=1)) + geom_point()
ggplot(data=df, aes(x=timestamp, y=payload$light, group=1)) + geom_line(color = "red")
light <- df[.(tyoe=="light")]
light <- df %>% d[.(tyoe=="light")]
light <- subset(df, type == "light")
light
unique(df$type)
View(light)
movement <- subset(df, type == "movement")
wireless <- subset(df, type == "wireless")
sound <- subset(df, type == "sound")
gps <- subset(df, type == "gps")
df <- df_raw %>% unnest()
reinstall("tidyr")
library("tidyr")
df <- df_raw %>% unnest()
df <- df_raw %>% unnest(c(df))
c(df)
colnames(df)
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
reinstall("anytime")
library("anytime")
reinstall("dplyr")
library("dplyr")
reinstall("ggplot2")
library("ggplot2")
reinstall("tidyr")
library("tidyr")
df_raw <- fromJSON("cleaned/1656633600.json", simplifyDataFrame = TRUE)
df_raw <- union(df_raw, fromJSON("cleaned/1656720000.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656806400.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656892800.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656979200.json", simplifyDataFrame = TRUE))
df <- df_raw %>% unnest(c(df))
df
df_raw
type(df_raw)
df <- as.data.frame(df_raw %>% unnest(c(df)))
df
df <- as.data.frame(df_raw %>% unnest(c()))
df
head(df, n=10)
df$timestamp <- anytime(df$timestamp)
nrows(df)
nrow(df)
light    <- Filter(function(x)!all(is.na(x)), subset(df, type == "light"))
light
unique(light$payload.x)
light    <- subset(df, type == "light")
light
light    <- subset(df, type == "light") %>% remove_empty("cols")
reinstall("janitor")
library("janitor")
light    <- subset(df, type == "light") %>% remove_empty("cols")
light
unique(light, payload.type)
unique(light, "payload.type")
unique(light$payload.type)
unique(light$payload.f)
light    <- subset(df, type == "light") %>% remove_empty(c("cols"))
light
light    <- subset(df, type == "light") %>% remove_empty("cols")
light    <- remove_empty(subset(df, type == "light"), "cols")
light
light    <- remove_empty(subset(df, type == "light"), which = "cols")
light
light    <- subset(df, type == "light")
light_clean <- remove_empty(light, which = "cols")
light_clean
View(df)
View(light)
light    <- subset(df, type == "light")[,colSums(is.na(df))<nrow(df)]
light    <- subset(df, type == "light")
light <- light[,colSums(is.na(df))<nrow(df)]
light <- Filter(function(x)!all(is.na(x)), light)
light
light$payload.x[0]
light[0]
light[0,]
light[1,]
light$payload.x[1]
light$payload.type
light$payload.x
light$timestamp
columnnames(light)
colnames(light)
print(light)
info(light)
light.info
dim(light)
str(light)
summary(light)
light <- Filter(function(x)!all(is.na(x)), light)
light
Filter(function(x)!all(is.na(x)), light)
light <- filter(function(x)!all(is.na(x)), light)
light <- Filter(function(x)!all(is.na(light$x)), colnames(light))
light
Filter(function(x)x==0, c(0, 0, 1, 2, 0))
light <- Filter(function(x)!all(is.na(light[x])), colnames(light))
light    <- subset(df, type == "light")
light <- Filter(function(x)!all(is.na(light[x])), colnames(light))
light
inst_packages <- installed.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
reinstall("anytime")
library("anytime")
reinstall("dplyr")
library("dplyr")
reinstall("ggplot2")
library("ggplot2")
reinstall("tidyr")
library("tidyr")
# Load and combine all json datasets into a single dataframe
df_raw <- fromJSON("cleaned/1656633600.json", simplifyDataFrame = TRUE)
df_raw <- union(df_raw, fromJSON("cleaned/1656720000.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656806400.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656892800.json", simplifyDataFrame = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656979200.json", simplifyDataFrame = TRUE))
# Parse data and rename headers
df <- as.data.frame(df_raw %>% unnest(c())) # Flatten nested structure (payload)
df_raw
df
names(df) <- c("timestamp", "dtype", "light", "x", "y", "z", "f", "wtype", "name", "addr", "rssi", "lat", "lon")
.packages()
reinstall <- function(package) {
if (package %in% inst_packages[, 1]) {
update.packages(package)
} else {
install.packages(package)
}
}
reinstall("jsonlite")
library("jsonlite")
reinstall("anytime")
library("anytime")
reinstall("dplyr")
library("dplyr")
reinstall("ggplot2")
library("ggplot2")
reinstall("tidyr")
library("tidyr")
# Load and combine all json datasets into a single dataframe
df_raw <- fromJSON("cleaned/1656633600.json", simplifyDataFrame = TRUE, flatten = TRUE)
df_raw <- union(df_raw, fromJSON("cleaned/1656720000.json", simplifyDataFrame = TRUE, flatten = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656806400.json", simplifyDataFrame = TRUE, flatten = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656892800.json", simplifyDataFrame = TRUE, flatten = TRUE))
df_raw <- union(df_raw, fromJSON("cleaned/1656979200.json", simplifyDataFrame = TRUE, flatten = TRUE
df_raw
df_raw <- fromJSON("cleaned/1656633600.json", simplifyDataFrame = TRUE, flatten = TRUE)
df_raw
# Load and combine all json datasets into a single dataframe
df_raw <- load_data("cleaned/1656633600.json")
load_data <- function(file) {
return(fromJSON(file, simplifyDataFrame = TRUE, flatten = TRUE));
}
# Load and combine all json datasets into a single dataframe
df_raw <- load_data("cleaned/1656633600.json")
df_raw
# Load and combine all json datasets into a single dataframe
df_raw <- load_data("cleaned/1656633600.json")
df_raw <- bind_rows(df_raw, load_data("cleaned/1656720000.json"))
df_raw
df_raw <- bind_rows(df_raw, load_data("cleaned/1656806400.json"))
df_raw <- bind_rows(df_raw, load_data("cleaned/1656892800.json"))
df_raw <- bind_rows(df_raw, load_data("cleaned/1656979200.json"))
df_raw
# Parse data and rename headers
df <- as.data.frame(df_raw %>% unnest(c())) # Flatten nested structure (payload)
names(df) <- c("timestamp", "dtype", "light", "x", "y", "z", "f", "wtype", "name", "addr", "rssi", "lat", "lon")
df
df$timestamp <- anytime(df$timestamp)
light    <- subset(df, dtype == "light")
light <- Filter(function(x)!all(is.na(x)), light)
light
light    <- Filter(function(x)!all(is.na(x)), subset(df, dtype == "light"))
light
clean_columns <- function(df) {
return(Filter(function(x)!all(is.na(x)), df))
}
light    <- clean_columns(subset(df, dtype == "light"))
light
movement <- clean_columns(subset(df, dtype == "movement"))
wireless <- clean_columns(subset(df, dtype == "wireless"))
sound    <- clean_columns(subset(df, dtype == "sound"))
gps      <- clean_columns(subset(df, dtype == "gps"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
return(subset(Filter(function(x)!all(is.na(x)), df), select=-c(type)))
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
return(subset(Filter(function(x)!all(is.na(x)), df), select=-c("type")))
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
cleaned <- Filter(function(x)!all(is.na(x)), df)
cleaned <- subset(cleaned, select=-c("type"))
return(cleaned)
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
cleaned <- Filter(function(x)!all(is.na(x)), df)
cleaned <- subset(cleaned, select = -c(type))
return(cleaned)
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
cleaned <- Filter(function(x)!all(is.na(x)), df)
#cleaned <- subset(cleaned, select = -c(type))
return(cleaned)
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
# Remove all columns with only NA and the type column
clean_columns <- function(df) {
cleaned <- Filter(function(x)!all(is.na(x)), df)
cleaned <- subset(cleaned, select = -c(dtype))
return(cleaned)
}
# Split data into it's different types
light    <- clean_columns(subset(df, dtype == "light"))
light
movement <- clean_columns(subset(df, dtype == "movement"))
wireless <- clean_columns(subset(df, dtype == "wireless"))
sound    <- clean_columns(subset(df, dtype == "sound"))
gps      <- clean_columns(subset(df, dtype == "gps"))
ggplot(data=light, aes(x=timestamp, y=light, group=1)) + geom_line(color = "red")
ggplot(data=light, aes(x=timestamp, y=light, group=1)) + geom_line()
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_continuous(breaks = 21600)
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_labels = "%m/%d/%Y %H:%M")
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%m/%d/%Y %H:%M")
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%m/%d/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 60))
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%m/%d/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 60, lineheight = 10))
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%m/%d/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 60))
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%d/%m/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 60))
ggplot(data=light, aes(x=timestamp, y=light, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%d/%m/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 90))
colnames(movement)
colnames(wireless)
unique(wireless$wtype)
wireless
sound
ggplot(data=sound, aes(x=timestamp, y=f, group=1)) +
geom_line() +
scale_x_datetime(date_breaks = "6 hours", date_labels = "%d/%m/%Y %H:%M") +
theme(axis.text.x = element_text(angle = 90))
gps
reinstall("sf")
library("sf")
reinstall("sf")
